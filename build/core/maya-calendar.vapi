/* maya-calendar.vapi generated by valac 0.34.9, do not modify. */

namespace Build {
	[CCode (cheader_filename = "maya-calendar.h")]
	public const string APP_NAME;
	[CCode (cheader_filename = "maya-calendar.h")]
	public const string DATADIR;
	[CCode (cheader_filename = "maya-calendar.h")]
	public const string GETTEXT_PACKAGE;
	[CCode (cheader_filename = "maya-calendar.h")]
	public const string PKGDATADIR;
	[CCode (cheader_filename = "maya-calendar.h")]
	public const string PLUGIN_DIR;
	[CCode (cheader_filename = "maya-calendar.h")]
	public const string RELEASE_NAME;
	[CCode (cheader_filename = "maya-calendar.h")]
	public const string VERSION;
	[CCode (cheader_filename = "maya-calendar.h")]
	public const string VERSION_INFO;
}
namespace Maya {
	namespace DefaultPlacementWidgets {
		[CCode (cheader_filename = "maya-calendar.h")]
		public static Gee.LinkedList<Maya.PlacementWidget> get_email (int row, bool needed = true, string entry_text = "", string? ph_text = null);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static Maya.PlacementWidget get_keep_copy (int row, bool default_value = false);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static Gee.LinkedList<Maya.PlacementWidget> get_user (int row, bool needed = true, string entry_text = "", string? ph_text = null);
	}
	namespace GesturesUtils {
		[CCode (cheader_filename = "maya-calendar.h")]
		public static bool on_scroll_event (Gdk.EventScroll event);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static async void reset_timer ();
	}
	namespace Model {
		[CCode (cheader_filename = "maya-calendar.h")]
		public class CalendarModel : GLib.Object {
			public GLib.Queue<E.Source> calendar_trash;
			public void add_event (E.Source source, E.CalComponent event);
			public void add_source (E.Source source);
			public bool calclient_is_readonly (E.Source source);
			public void change_month (int relative);
			public void change_year (int relative);
			public void delete_trashed_calendars ();
			public static Maya.Model.CalendarModel get_default ();
			public void load_all_sources ();
			public async void open ();
			public void remove_event (E.Source source, E.CalComponent event, E.CalObjModType mod_type);
			public void remove_source (E.Source source);
			public void restore_calendar ();
			public void trash_calendar (E.Source source);
			public void update_event (E.Source source, E.CalComponent event, E.CalObjModType mod_type);
			public Maya.Util.DateRange data_range { get; private set; }
			public E.CalComponent drag_component { get; set; }
			public Maya.Util.DateRange month_range { get; private set; }
			public GLib.DateTime month_start { get; set; }
			public int num_weeks { get; private set; }
			public E.SourceRegistry registry { get; private set; }
			public Maya.Settings.Weekday week_starts_on { get; set; }
			public signal void connected (E.Source source);
			public signal void connecting (E.Source source, GLib.Cancellable cancellable);
			public signal void error_received (string error);
			public signal void events_added (E.Source source, Gee.Collection<E.CalComponent> events);
			public signal void events_removed (E.Source source, Gee.Collection<E.CalComponent> events);
			public signal void events_updated (E.Source source, Gee.Collection<E.CalComponent> events);
			public signal void parameters_changed ();
		}
	}
	namespace Settings {
		[CCode (cheader_filename = "maya-calendar.h")]
		public class MayaSettings : Granite.Services.Settings {
			public static Maya.Settings.MayaSettings get_default ();
			public string[] plugins_disabled { get; set; }
		}
		[CCode (cheader_filename = "maya-calendar.h")]
		public class SavedState : Granite.Services.Settings {
			public static Maya.Settings.SavedState get_default ();
			public GLib.DateTime get_page ();
			public GLib.DateTime get_selected ();
			public int hpaned_position { get; set; }
			public string month_page { get; set; }
			public string selected_day { get; set; }
			public bool show_weeks { get; set; }
			public int window_height { get; set; }
			public Maya.Settings.WindowState window_state { get; set; }
			public int window_width { get; set; }
		}
		[CCode (cheader_filename = "maya-calendar.h")]
		public enum Weekday {
			SUNDAY,
			MONDAY,
			TUESDAY,
			WEDNESDAY,
			THURSDAY,
			FRIDAY,
			SATURDAY
		}
		[CCode (cheader_filename = "maya-calendar.h")]
		public enum WindowState {
			NORMAL,
			MAXIMIZED
		}
		[CCode (cheader_filename = "maya-calendar.h")]
		public static string DateFormat ();
		[CCode (cheader_filename = "maya-calendar.h")]
		public static string DateFormat_Complete ();
		[CCode (cheader_filename = "maya-calendar.h")]
		public static string TimeFormat ();
	}
	namespace Util {
		[CCode (cheader_filename = "maya-calendar.h")]
		public class Css {
			public Css ();
			public static unowned Gtk.CssProvider get_css_provider ();
		}
		[CCode (cheader_filename = "maya-calendar.h")]
		public class DateIterator : GLib.Object, Gee.Traversable<GLib.DateTime>, Gee.Iterator<GLib.DateTime> {
			public DateIterator (Maya.Util.DateRange range);
			public bool first ();
		}
		[CCode (cheader_filename = "maya-calendar.h")]
		public class DateRange : GLib.Object, Gee.Traversable<GLib.DateTime>, Gee.Iterable<GLib.DateTime> {
			public DateRange (GLib.DateTime first, GLib.DateTime last);
			public bool contains (GLib.DateTime time);
			public DateRange.copy (Maya.Util.DateRange date_range);
			public bool equals (Maya.Util.DateRange other);
			public Gee.List<GLib.DateTime> to_list ();
			public Gee.SortedSet<GLib.DateTime> to_set ();
			public int64 days { get; }
			public GLib.DateTime first { get; private set; }
			public GLib.DateTime last { get; private set; }
		}
		[CCode (cheader_filename = "maya-calendar.h")]
		public static bool calcomponent_equal_func (E.CalComponent a, E.CalComponent b);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static uint calcomponent_hash_func (E.CalComponent key);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static int compare_events (E.CalComponent comp1, E.CalComponent comp2);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static iCal.TimeType date_time_to_ical (GLib.DateTime date, GLib.DateTime? time_local, string? timezone = E.Util.get_system_timezone_location ());
		[CCode (cheader_filename = "maya-calendar.h")]
		public static bool datetime_equal_func (GLib.DateTime a, GLib.DateTime b);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static uint datetime_hash_func (GLib.DateTime key);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static Gee.Collection<Maya.Util.DateRange> event_date_ranges (iCal.Component comp, Maya.Util.DateRange view_range);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static Gtk.TreePath? find_treemodel_object<T> (Gtk.TreeModel model, int column, T object, GLib.EqualFunc<T>? eqfunc = null);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static GLib.DateTime get_date_from_ical_day (GLib.DateTime date, short day);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static string get_hexa_color (Gdk.RGBA color);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static void get_local_datetimes_from_icalcomponent (iCal.Component comp, out GLib.DateTime start_date, out GLib.DateTime end_date);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static string get_source_location (E.Source source);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static GLib.DateTime get_start_of_month (owned GLib.DateTime? date = null);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static GLib.DateTime ical_to_date_time (iCal.TimeType date);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static bool is_all_day (GLib.DateTime dtstart, GLib.DateTime dtend);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static bool is_multiday_event (iCal.Component comp);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static void remap<K,V> (Gee.Map<K,K> keymap, Gee.Map<K,V> valmap, ref Gee.Map<K,V> remap);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static void save_temp_selected_calendars ();
		[CCode (cheader_filename = "maya-calendar.h")]
		public static Gtk.Widget set_margins (Gtk.Widget widget, int top, int end, int bottom, int start);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static Gtk.Alignment set_paddings (Gtk.Widget widget, int top, int right, int bottom, int left);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static bool source_equal_func (E.Source a, E.Source b);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static uint source_hash_func (E.Source key);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static bool string_equal_func (string a, string b);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static uint string_hash_func (string key);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static GLib.DateTime strip_time (GLib.DateTime datetime);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static GLib.TimeZone timezone_from_ical (iCal.TimeType date);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static void zip<F,G> (Gee.Iterable<F> iterable1, Gee.Iterable<G> iterable2, Gee.Map<F,G> map);
		[CCode (cheader_filename = "maya-calendar.h")]
		public static Gee.Map<GLib.DateTime,GLib.DateTime> zip_date_ranges (Maya.Util.DateRange dr1, Maya.Util.DateRange dr2);
	}
	[CCode (cheader_filename = "maya-calendar.h")]
	public class BackendsManager : GLib.Object {
		public Gee.ArrayList<weak Maya.Backend> backends;
		public void add_backend (Maya.Backend b);
		public static Maya.BackendsManager get_default ();
		public void remove_backend (Maya.Backend b);
		public signal void backend_added (Maya.Backend b);
		public signal void backend_removed (Maya.Backend b);
	}
	[CCode (cheader_filename = "maya-calendar.h")]
	public class LocalBackend : GLib.Object, Maya.Backend {
		public LocalBackend ();
		public async void add_source (E.Source new_source, bool set_default);
		public async void set_source_default (E.Source source);
	}
	[CCode (cheader_filename = "maya-calendar.h")]
	public class PlacementWidget : GLib.Object {
		public int column;
		public bool needed;
		public string ref_name;
		public int row;
		public Gtk.Widget widget;
		public PlacementWidget ();
	}
	[CCode (cheader_filename = "maya-calendar.h")]
	public interface Backend : GLib.Object {
		public abstract void add_new_calendar (string name, string color, bool set_default, Gee.Collection<Maya.PlacementWidget> widgets);
		public abstract string get_name ();
		public abstract Gee.Collection<Maya.PlacementWidget> get_new_calendar_widget (E.Source? to_edit = null);
		public abstract string get_uid ();
		public abstract void modify_calendar (string name, string color, bool set_default, Gee.Collection<Maya.PlacementWidget> widgets, E.Source source);
	}
}
